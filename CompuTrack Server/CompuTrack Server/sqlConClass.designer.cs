#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompuTrack_Server
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_98559_comp")]
	public partial class sqlConClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttComputer(tComputer instance);
    partial void UpdatetComputer(tComputer instance);
    partial void DeletetComputer(tComputer instance);
    partial void InserttAlert(tAlert instance);
    partial void UpdatetAlert(tAlert instance);
    partial void DeletetAlert(tAlert instance);
    partial void InserttUser(tUser instance);
    partial void UpdatetUser(tUser instance);
    partial void DeletetUser(tUser instance);
    partial void InserttOrg(tOrg instance);
    partial void UpdatetOrg(tOrg instance);
    partial void DeletetOrg(tOrg instance);
    partial void InserttLiveDataHistory(tLiveDataHistory instance);
    partial void UpdatetLiveDataHistory(tLiveDataHistory instance);
    partial void DeletetLiveDataHistory(tLiveDataHistory instance);
    partial void InserttLiveData(tLiveData instance);
    partial void UpdatetLiveData(tLiveData instance);
    partial void DeletetLiveData(tLiveData instance);
    #endregion
		
		public sqlConClassDataContext() : 
				base(global::CompuTrack_Server.Properties.Settings.Default.DB_98559_compConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public sqlConClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sqlConClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sqlConClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sqlConClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tComputer> tComputers
		{
			get
			{
				return this.GetTable<tComputer>();
			}
		}
		
		public System.Data.Linq.Table<tAlert> tAlerts
		{
			get
			{
				return this.GetTable<tAlert>();
			}
		}
		
		public System.Data.Linq.Table<tUser> tUsers
		{
			get
			{
				return this.GetTable<tUser>();
			}
		}
		
		public System.Data.Linq.Table<tOrg> tOrgs
		{
			get
			{
				return this.GetTable<tOrg>();
			}
		}
		
		public System.Data.Linq.Table<tLiveDataHistory> tLiveDataHistories
		{
			get
			{
				return this.GetTable<tLiveDataHistory>();
			}
		}
		
		public System.Data.Linq.Table<tLiveData> tLiveDatas
		{
			get
			{
				return this.GetTable<tLiveData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tComputers")]
	public partial class tComputer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _compKey;
		
		private System.Nullable<int> _orgKey;
		
		private string _make;
		
		private string _model;
		
		private System.Nullable<int> _osKey;
		
		private string _compName;
		
		private string _username;
		
		private EntitySet<tAlert> _tAlerts;
		
		private EntitySet<tLiveDataHistory> _tLiveDataHistories;
		
		private EntitySet<tLiveData> _tLiveDatas;
		
		private EntityRef<tOrg> _tOrg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncompKeyChanging(int value);
    partial void OncompKeyChanged();
    partial void OnorgKeyChanging(System.Nullable<int> value);
    partial void OnorgKeyChanged();
    partial void OnmakeChanging(string value);
    partial void OnmakeChanged();
    partial void OnmodelChanging(string value);
    partial void OnmodelChanged();
    partial void OnosKeyChanging(System.Nullable<int> value);
    partial void OnosKeyChanged();
    partial void OncompNameChanging(string value);
    partial void OncompNameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    #endregion
		
		public tComputer()
		{
			this._tAlerts = new EntitySet<tAlert>(new Action<tAlert>(this.attach_tAlerts), new Action<tAlert>(this.detach_tAlerts));
			this._tLiveDataHistories = new EntitySet<tLiveDataHistory>(new Action<tLiveDataHistory>(this.attach_tLiveDataHistories), new Action<tLiveDataHistory>(this.detach_tLiveDataHistories));
			this._tLiveDatas = new EntitySet<tLiveData>(new Action<tLiveData>(this.attach_tLiveDatas), new Action<tLiveData>(this.detach_tLiveDatas));
			this._tOrg = default(EntityRef<tOrg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_compKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int compKey
		{
			get
			{
				return this._compKey;
			}
			set
			{
				if ((this._compKey != value))
				{
					this.OncompKeyChanging(value);
					this.SendPropertyChanging();
					this._compKey = value;
					this.SendPropertyChanged("compKey");
					this.OncompKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgKey", DbType="Int")]
		public System.Nullable<int> orgKey
		{
			get
			{
				return this._orgKey;
			}
			set
			{
				if ((this._orgKey != value))
				{
					if (this._tOrg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorgKeyChanging(value);
					this.SendPropertyChanging();
					this._orgKey = value;
					this.SendPropertyChanged("orgKey");
					this.OnorgKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_make", DbType="VarChar(20)")]
		public string make
		{
			get
			{
				return this._make;
			}
			set
			{
				if ((this._make != value))
				{
					this.OnmakeChanging(value);
					this.SendPropertyChanging();
					this._make = value;
					this.SendPropertyChanged("make");
					this.OnmakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model", DbType="VarChar(50)")]
		public string model
		{
			get
			{
				return this._model;
			}
			set
			{
				if ((this._model != value))
				{
					this.OnmodelChanging(value);
					this.SendPropertyChanging();
					this._model = value;
					this.SendPropertyChanged("model");
					this.OnmodelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_osKey", DbType="Int")]
		public System.Nullable<int> osKey
		{
			get
			{
				return this._osKey;
			}
			set
			{
				if ((this._osKey != value))
				{
					this.OnosKeyChanging(value);
					this.SendPropertyChanging();
					this._osKey = value;
					this.SendPropertyChanged("osKey");
					this.OnosKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_compName", DbType="VarChar(50)")]
		public string compName
		{
			get
			{
				return this._compName;
			}
			set
			{
				if ((this._compName != value))
				{
					this.OncompNameChanging(value);
					this.SendPropertyChanging();
					this._compName = value;
					this.SendPropertyChanged("compName");
					this.OncompNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tComputer_tAlert", Storage="_tAlerts", ThisKey="compKey", OtherKey="alertAssetKey")]
		public EntitySet<tAlert> tAlerts
		{
			get
			{
				return this._tAlerts;
			}
			set
			{
				this._tAlerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tComputer_tLiveDataHistory", Storage="_tLiveDataHistories", ThisKey="compKey", OtherKey="compKey")]
		public EntitySet<tLiveDataHistory> tLiveDataHistories
		{
			get
			{
				return this._tLiveDataHistories;
			}
			set
			{
				this._tLiveDataHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tComputer_tLiveData", Storage="_tLiveDatas", ThisKey="compKey", OtherKey="compKey")]
		public EntitySet<tLiveData> tLiveDatas
		{
			get
			{
				return this._tLiveDatas;
			}
			set
			{
				this._tLiveDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tOrg_tComputer", Storage="_tOrg", ThisKey="orgKey", OtherKey="orgKey", IsForeignKey=true)]
		public tOrg tOrg
		{
			get
			{
				return this._tOrg.Entity;
			}
			set
			{
				tOrg previousValue = this._tOrg.Entity;
				if (((previousValue != value) 
							|| (this._tOrg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tOrg.Entity = null;
						previousValue.tComputers.Remove(this);
					}
					this._tOrg.Entity = value;
					if ((value != null))
					{
						value.tComputers.Add(this);
						this._orgKey = value.orgKey;
					}
					else
					{
						this._orgKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("tOrg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tAlerts(tAlert entity)
		{
			this.SendPropertyChanging();
			entity.tComputer = this;
		}
		
		private void detach_tAlerts(tAlert entity)
		{
			this.SendPropertyChanging();
			entity.tComputer = null;
		}
		
		private void attach_tLiveDataHistories(tLiveDataHistory entity)
		{
			this.SendPropertyChanging();
			entity.tComputer = this;
		}
		
		private void detach_tLiveDataHistories(tLiveDataHistory entity)
		{
			this.SendPropertyChanging();
			entity.tComputer = null;
		}
		
		private void attach_tLiveDatas(tLiveData entity)
		{
			this.SendPropertyChanging();
			entity.tComputer = this;
		}
		
		private void detach_tLiveDatas(tLiveData entity)
		{
			this.SendPropertyChanging();
			entity.tComputer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tAlert")]
	public partial class tAlert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _alertKey;
		
		private System.Nullable<int> _orgKey;
		
		private string _alertName;
		
		private string _alertDesc;
		
		private System.DateTime _alertCreateDate;
		
		private System.Nullable<int> _alertAssetKey;
		
		private System.Nullable<int> _alertStatus;
		
		private EntityRef<tComputer> _tComputer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalertKeyChanging(int value);
    partial void OnalertKeyChanged();
    partial void OnorgKeyChanging(System.Nullable<int> value);
    partial void OnorgKeyChanged();
    partial void OnalertNameChanging(string value);
    partial void OnalertNameChanged();
    partial void OnalertDescChanging(string value);
    partial void OnalertDescChanged();
    partial void OnalertCreateDateChanging(System.DateTime value);
    partial void OnalertCreateDateChanged();
    partial void OnalertAssetKeyChanging(System.Nullable<int> value);
    partial void OnalertAssetKeyChanged();
    partial void OnalertStatusChanging(System.Nullable<int> value);
    partial void OnalertStatusChanged();
    #endregion
		
		public tAlert()
		{
			this._tComputer = default(EntityRef<tComputer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alertKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int alertKey
		{
			get
			{
				return this._alertKey;
			}
			set
			{
				if ((this._alertKey != value))
				{
					this.OnalertKeyChanging(value);
					this.SendPropertyChanging();
					this._alertKey = value;
					this.SendPropertyChanged("alertKey");
					this.OnalertKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgKey", DbType="Int")]
		public System.Nullable<int> orgKey
		{
			get
			{
				return this._orgKey;
			}
			set
			{
				if ((this._orgKey != value))
				{
					this.OnorgKeyChanging(value);
					this.SendPropertyChanging();
					this._orgKey = value;
					this.SendPropertyChanged("orgKey");
					this.OnorgKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alertName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string alertName
		{
			get
			{
				return this._alertName;
			}
			set
			{
				if ((this._alertName != value))
				{
					this.OnalertNameChanging(value);
					this.SendPropertyChanging();
					this._alertName = value;
					this.SendPropertyChanged("alertName");
					this.OnalertNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alertDesc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string alertDesc
		{
			get
			{
				return this._alertDesc;
			}
			set
			{
				if ((this._alertDesc != value))
				{
					this.OnalertDescChanging(value);
					this.SendPropertyChanging();
					this._alertDesc = value;
					this.SendPropertyChanged("alertDesc");
					this.OnalertDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alertCreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime alertCreateDate
		{
			get
			{
				return this._alertCreateDate;
			}
			set
			{
				if ((this._alertCreateDate != value))
				{
					this.OnalertCreateDateChanging(value);
					this.SendPropertyChanging();
					this._alertCreateDate = value;
					this.SendPropertyChanged("alertCreateDate");
					this.OnalertCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alertAssetKey", DbType="Int")]
		public System.Nullable<int> alertAssetKey
		{
			get
			{
				return this._alertAssetKey;
			}
			set
			{
				if ((this._alertAssetKey != value))
				{
					if (this._tComputer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalertAssetKeyChanging(value);
					this.SendPropertyChanging();
					this._alertAssetKey = value;
					this.SendPropertyChanged("alertAssetKey");
					this.OnalertAssetKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alertStatus", DbType="Int")]
		public System.Nullable<int> alertStatus
		{
			get
			{
				return this._alertStatus;
			}
			set
			{
				if ((this._alertStatus != value))
				{
					this.OnalertStatusChanging(value);
					this.SendPropertyChanging();
					this._alertStatus = value;
					this.SendPropertyChanged("alertStatus");
					this.OnalertStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tComputer_tAlert", Storage="_tComputer", ThisKey="alertAssetKey", OtherKey="compKey", IsForeignKey=true)]
		public tComputer tComputer
		{
			get
			{
				return this._tComputer.Entity;
			}
			set
			{
				tComputer previousValue = this._tComputer.Entity;
				if (((previousValue != value) 
							|| (this._tComputer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tComputer.Entity = null;
						previousValue.tAlerts.Remove(this);
					}
					this._tComputer.Entity = value;
					if ((value != null))
					{
						value.tAlerts.Add(this);
						this._alertAssetKey = value.compKey;
					}
					else
					{
						this._alertAssetKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("tComputer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tUser")]
	public partial class tUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userKey;
		
		private int _orgKey;
		
		private string _fname;
		
		private string _lname;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<int> _userType;
		
		private EntityRef<tOrg> _tOrg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserKeyChanging(int value);
    partial void OnuserKeyChanged();
    partial void OnorgKeyChanging(int value);
    partial void OnorgKeyChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnuserTypeChanging(System.Nullable<int> value);
    partial void OnuserTypeChanged();
    #endregion
		
		public tUser()
		{
			this._tOrg = default(EntityRef<tOrg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userKey
		{
			get
			{
				return this._userKey;
			}
			set
			{
				if ((this._userKey != value))
				{
					this.OnuserKeyChanging(value);
					this.SendPropertyChanging();
					this._userKey = value;
					this.SendPropertyChanged("userKey");
					this.OnuserKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgKey", DbType="Int NOT NULL")]
		public int orgKey
		{
			get
			{
				return this._orgKey;
			}
			set
			{
				if ((this._orgKey != value))
				{
					if (this._tOrg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorgKeyChanging(value);
					this.SendPropertyChanging();
					this._orgKey = value;
					this.SendPropertyChanged("orgKey");
					this.OnorgKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fname", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lname", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userType", DbType="Int")]
		public System.Nullable<int> userType
		{
			get
			{
				return this._userType;
			}
			set
			{
				if ((this._userType != value))
				{
					this.OnuserTypeChanging(value);
					this.SendPropertyChanging();
					this._userType = value;
					this.SendPropertyChanged("userType");
					this.OnuserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tOrg_tUser", Storage="_tOrg", ThisKey="orgKey", OtherKey="orgKey", IsForeignKey=true)]
		public tOrg tOrg
		{
			get
			{
				return this._tOrg.Entity;
			}
			set
			{
				tOrg previousValue = this._tOrg.Entity;
				if (((previousValue != value) 
							|| (this._tOrg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tOrg.Entity = null;
						previousValue.tUsers.Remove(this);
					}
					this._tOrg.Entity = value;
					if ((value != null))
					{
						value.tUsers.Add(this);
						this._orgKey = value.orgKey;
					}
					else
					{
						this._orgKey = default(int);
					}
					this.SendPropertyChanged("tOrg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tOrg")]
	public partial class tOrg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orgKey;
		
		private string _orgName;
		
		private System.Nullable<int> _assetCount;
		
		private EntitySet<tComputer> _tComputers;
		
		private EntitySet<tUser> _tUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorgKeyChanging(int value);
    partial void OnorgKeyChanged();
    partial void OnorgNameChanging(string value);
    partial void OnorgNameChanged();
    partial void OnassetCountChanging(System.Nullable<int> value);
    partial void OnassetCountChanged();
    #endregion
		
		public tOrg()
		{
			this._tComputers = new EntitySet<tComputer>(new Action<tComputer>(this.attach_tComputers), new Action<tComputer>(this.detach_tComputers));
			this._tUsers = new EntitySet<tUser>(new Action<tUser>(this.attach_tUsers), new Action<tUser>(this.detach_tUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int orgKey
		{
			get
			{
				return this._orgKey;
			}
			set
			{
				if ((this._orgKey != value))
				{
					this.OnorgKeyChanging(value);
					this.SendPropertyChanging();
					this._orgKey = value;
					this.SendPropertyChanged("orgKey");
					this.OnorgKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orgName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string orgName
		{
			get
			{
				return this._orgName;
			}
			set
			{
				if ((this._orgName != value))
				{
					this.OnorgNameChanging(value);
					this.SendPropertyChanging();
					this._orgName = value;
					this.SendPropertyChanged("orgName");
					this.OnorgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetCount", DbType="Int")]
		public System.Nullable<int> assetCount
		{
			get
			{
				return this._assetCount;
			}
			set
			{
				if ((this._assetCount != value))
				{
					this.OnassetCountChanging(value);
					this.SendPropertyChanging();
					this._assetCount = value;
					this.SendPropertyChanged("assetCount");
					this.OnassetCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tOrg_tComputer", Storage="_tComputers", ThisKey="orgKey", OtherKey="orgKey")]
		public EntitySet<tComputer> tComputers
		{
			get
			{
				return this._tComputers;
			}
			set
			{
				this._tComputers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tOrg_tUser", Storage="_tUsers", ThisKey="orgKey", OtherKey="orgKey")]
		public EntitySet<tUser> tUsers
		{
			get
			{
				return this._tUsers;
			}
			set
			{
				this._tUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tComputers(tComputer entity)
		{
			this.SendPropertyChanging();
			entity.tOrg = this;
		}
		
		private void detach_tComputers(tComputer entity)
		{
			this.SendPropertyChanging();
			entity.tOrg = null;
		}
		
		private void attach_tUsers(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tOrg = this;
		}
		
		private void detach_tUsers(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tOrg = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tLiveDataHistory")]
	public partial class tLiveDataHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _liveDataHistoryKey;
		
		private int _compKey;
		
		private System.Nullable<decimal> _cpuSpeed;
		
		private System.Nullable<int> _cpuUsage;
		
		private System.Nullable<decimal> _ramUsage;
		
		private System.Nullable<int> _freeSpace;
		
		private System.Nullable<int> _driveSize;
		
		private EntityRef<tComputer> _tComputer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnliveDataHistoryKeyChanging(int value);
    partial void OnliveDataHistoryKeyChanged();
    partial void OncompKeyChanging(int value);
    partial void OncompKeyChanged();
    partial void OncpuSpeedChanging(System.Nullable<decimal> value);
    partial void OncpuSpeedChanged();
    partial void OncpuUsageChanging(System.Nullable<int> value);
    partial void OncpuUsageChanged();
    partial void OnramUsageChanging(System.Nullable<decimal> value);
    partial void OnramUsageChanged();
    partial void OnfreeSpaceChanging(System.Nullable<int> value);
    partial void OnfreeSpaceChanged();
    partial void OndriveSizeChanging(System.Nullable<int> value);
    partial void OndriveSizeChanged();
    #endregion
		
		public tLiveDataHistory()
		{
			this._tComputer = default(EntityRef<tComputer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_liveDataHistoryKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int liveDataHistoryKey
		{
			get
			{
				return this._liveDataHistoryKey;
			}
			set
			{
				if ((this._liveDataHistoryKey != value))
				{
					this.OnliveDataHistoryKeyChanging(value);
					this.SendPropertyChanging();
					this._liveDataHistoryKey = value;
					this.SendPropertyChanged("liveDataHistoryKey");
					this.OnliveDataHistoryKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_compKey", DbType="Int NOT NULL")]
		public int compKey
		{
			get
			{
				return this._compKey;
			}
			set
			{
				if ((this._compKey != value))
				{
					if (this._tComputer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncompKeyChanging(value);
					this.SendPropertyChanging();
					this._compKey = value;
					this.SendPropertyChanged("compKey");
					this.OncompKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cpuSpeed", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> cpuSpeed
		{
			get
			{
				return this._cpuSpeed;
			}
			set
			{
				if ((this._cpuSpeed != value))
				{
					this.OncpuSpeedChanging(value);
					this.SendPropertyChanging();
					this._cpuSpeed = value;
					this.SendPropertyChanged("cpuSpeed");
					this.OncpuSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cpuUsage", DbType="Int")]
		public System.Nullable<int> cpuUsage
		{
			get
			{
				return this._cpuUsage;
			}
			set
			{
				if ((this._cpuUsage != value))
				{
					this.OncpuUsageChanging(value);
					this.SendPropertyChanging();
					this._cpuUsage = value;
					this.SendPropertyChanged("cpuUsage");
					this.OncpuUsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ramUsage", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ramUsage
		{
			get
			{
				return this._ramUsage;
			}
			set
			{
				if ((this._ramUsage != value))
				{
					this.OnramUsageChanging(value);
					this.SendPropertyChanging();
					this._ramUsage = value;
					this.SendPropertyChanged("ramUsage");
					this.OnramUsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_freeSpace", DbType="Int")]
		public System.Nullable<int> freeSpace
		{
			get
			{
				return this._freeSpace;
			}
			set
			{
				if ((this._freeSpace != value))
				{
					this.OnfreeSpaceChanging(value);
					this.SendPropertyChanging();
					this._freeSpace = value;
					this.SendPropertyChanged("freeSpace");
					this.OnfreeSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_driveSize", DbType="Int")]
		public System.Nullable<int> driveSize
		{
			get
			{
				return this._driveSize;
			}
			set
			{
				if ((this._driveSize != value))
				{
					this.OndriveSizeChanging(value);
					this.SendPropertyChanging();
					this._driveSize = value;
					this.SendPropertyChanged("driveSize");
					this.OndriveSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tComputer_tLiveDataHistory", Storage="_tComputer", ThisKey="compKey", OtherKey="compKey", IsForeignKey=true)]
		public tComputer tComputer
		{
			get
			{
				return this._tComputer.Entity;
			}
			set
			{
				tComputer previousValue = this._tComputer.Entity;
				if (((previousValue != value) 
							|| (this._tComputer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tComputer.Entity = null;
						previousValue.tLiveDataHistories.Remove(this);
					}
					this._tComputer.Entity = value;
					if ((value != null))
					{
						value.tLiveDataHistories.Add(this);
						this._compKey = value.compKey;
					}
					else
					{
						this._compKey = default(int);
					}
					this.SendPropertyChanged("tComputer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tLiveData")]
	public partial class tLiveData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _liveKey;
		
		private System.Nullable<int> _compKey;
		
		private string _ram;
		
		private string _cpuSpeed;
		
		private string _cpuUsage;
		
		private string _freeSpace;
		
		private string _activeApp;
		
		private string _ipAddr;
		
		private System.Nullable<System.DateTime> _lastSeen;
		
		private EntityRef<tComputer> _tComputer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnliveKeyChanging(int value);
    partial void OnliveKeyChanged();
    partial void OncompKeyChanging(System.Nullable<int> value);
    partial void OncompKeyChanged();
    partial void OnramChanging(string value);
    partial void OnramChanged();
    partial void OncpuSpeedChanging(string value);
    partial void OncpuSpeedChanged();
    partial void OncpuUsageChanging(string value);
    partial void OncpuUsageChanged();
    partial void OnfreeSpaceChanging(string value);
    partial void OnfreeSpaceChanged();
    partial void OnactiveAppChanging(string value);
    partial void OnactiveAppChanged();
    partial void OnipAddrChanging(string value);
    partial void OnipAddrChanged();
    partial void OnlastSeenChanging(System.Nullable<System.DateTime> value);
    partial void OnlastSeenChanged();
    #endregion
		
		public tLiveData()
		{
			this._tComputer = default(EntityRef<tComputer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_liveKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int liveKey
		{
			get
			{
				return this._liveKey;
			}
			set
			{
				if ((this._liveKey != value))
				{
					this.OnliveKeyChanging(value);
					this.SendPropertyChanging();
					this._liveKey = value;
					this.SendPropertyChanged("liveKey");
					this.OnliveKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_compKey", DbType="Int")]
		public System.Nullable<int> compKey
		{
			get
			{
				return this._compKey;
			}
			set
			{
				if ((this._compKey != value))
				{
					if (this._tComputer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncompKeyChanging(value);
					this.SendPropertyChanging();
					this._compKey = value;
					this.SendPropertyChanged("compKey");
					this.OncompKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ram", DbType="VarChar(10)")]
		public string ram
		{
			get
			{
				return this._ram;
			}
			set
			{
				if ((this._ram != value))
				{
					this.OnramChanging(value);
					this.SendPropertyChanging();
					this._ram = value;
					this.SendPropertyChanged("ram");
					this.OnramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cpuSpeed", DbType="VarChar(10)")]
		public string cpuSpeed
		{
			get
			{
				return this._cpuSpeed;
			}
			set
			{
				if ((this._cpuSpeed != value))
				{
					this.OncpuSpeedChanging(value);
					this.SendPropertyChanging();
					this._cpuSpeed = value;
					this.SendPropertyChanged("cpuSpeed");
					this.OncpuSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cpuUsage", DbType="VarChar(3)")]
		public string cpuUsage
		{
			get
			{
				return this._cpuUsage;
			}
			set
			{
				if ((this._cpuUsage != value))
				{
					this.OncpuUsageChanging(value);
					this.SendPropertyChanging();
					this._cpuUsage = value;
					this.SendPropertyChanged("cpuUsage");
					this.OncpuUsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_freeSpace", DbType="VarChar(20)")]
		public string freeSpace
		{
			get
			{
				return this._freeSpace;
			}
			set
			{
				if ((this._freeSpace != value))
				{
					this.OnfreeSpaceChanging(value);
					this.SendPropertyChanging();
					this._freeSpace = value;
					this.SendPropertyChanged("freeSpace");
					this.OnfreeSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_activeApp", DbType="VarChar(500)")]
		public string activeApp
		{
			get
			{
				return this._activeApp;
			}
			set
			{
				if ((this._activeApp != value))
				{
					this.OnactiveAppChanging(value);
					this.SendPropertyChanging();
					this._activeApp = value;
					this.SendPropertyChanged("activeApp");
					this.OnactiveAppChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ipAddr", DbType="VarChar(20)")]
		public string ipAddr
		{
			get
			{
				return this._ipAddr;
			}
			set
			{
				if ((this._ipAddr != value))
				{
					this.OnipAddrChanging(value);
					this.SendPropertyChanging();
					this._ipAddr = value;
					this.SendPropertyChanged("ipAddr");
					this.OnipAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastSeen", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastSeen
		{
			get
			{
				return this._lastSeen;
			}
			set
			{
				if ((this._lastSeen != value))
				{
					this.OnlastSeenChanging(value);
					this.SendPropertyChanging();
					this._lastSeen = value;
					this.SendPropertyChanged("lastSeen");
					this.OnlastSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tComputer_tLiveData", Storage="_tComputer", ThisKey="compKey", OtherKey="compKey", IsForeignKey=true)]
		public tComputer tComputer
		{
			get
			{
				return this._tComputer.Entity;
			}
			set
			{
				tComputer previousValue = this._tComputer.Entity;
				if (((previousValue != value) 
							|| (this._tComputer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tComputer.Entity = null;
						previousValue.tLiveDatas.Remove(this);
					}
					this._tComputer.Entity = value;
					if ((value != null))
					{
						value.tLiveDatas.Add(this);
						this._compKey = value.compKey;
					}
					else
					{
						this._compKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("tComputer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
